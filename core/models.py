# Python imports
import requests
# Django imports
from django.dispatch import receiver
# Libraries imports
from allauth.socialaccount.signals import social_account_updated
from allauth.socialaccount.models import SocialToken
# App imports
from accounts.models import User
from classroom.models.course import Course
from classroom.models.topic import Topic


# @receiver(user_logged_in)
@receiver(social_account_updated)
def retrieve_google_classroom_data(request, sociallogin, **kwargs):
    """
    Retrieve Google Classroom data after user sucessfully authenticates via a social provider.

    :param request: request object passed from allauth
    :param sociallogin: social login passed from allauth
    :param kwargs:
    :return: none
    """
    # updates user's extra data
    user = User.objects.get(pk=request.user.id)
    user.name = sociallogin.account.extra_data['name']
    user.avatar = sociallogin.account.extra_data['picture']
    user.save()

    # get the user's authorization token
    token = SocialToken.objects.filter(account__user=request.user, account__provider='google')[0].token

    save_courses(user, token)

def save_courses(user, token):
    """
    Refresh courses on database from Google Classroom API

    :param user: logged user
    :param token: Google'token generated by allauth
    :return: none
    """

    GOOGLE_API_COURSES = 'https://classroom.googleapis.com/v1/courses/'
    headers = {
        'content-type': 'application/json',
    }

    response = requests.get(
        GOOGLE_API_COURSES,
        params={'access_token': token},
        headers=headers)

    courses = response.json()['courses']

    Course.objects.filter(teacher=user).delete()

    for course in courses:
        saved_course = Course.objects.create(
            id=course['id'],
            teacher=user,
            name=course['name'].title(),
            section=course['section'].title(),
            state=course['courseState'],
            link=course['alternateLink'],
            teachers_email=course['teacherGroupEmail'],
            course_email=course['courseGroupEmail'],
            created_at=course['creationTime'],
            updated_at=course['updateTime']
        )
        save_course_topics(user, token, saved_course)

def save_course_topics(user, token, course):
    """
    Refresh toics on database from Google Classroom API

    :param user: logged user
    :param token: Google'token generated by allauth
    :param course: Course object
    :return: none
    """

    # save topics' data
    GOOGLE_API_TOPICS = 'https://classroom.googleapis.com/v1/courses/%s/topics' % course.id
    headers = {
        'content-type': 'application/json',
    }

    response = requests.get(
        GOOGLE_API_TOPICS,
        params={'access_token': token},
        headers=headers)

    topics = response.json()['topic']
    for topic in topics:
        Topic.objects.create(
            id=topic['topicId'],
            course=course,
            name=topic['name'].title(),
            updated_at=topic['updateTime']
        )
